name: CI-CD

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    tags: [ "v*" ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/quakewatch
  CHART_DIR: helm/quakewatch

jobs:
  lint-test:
    name: Lint & Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Pylint
        run: |
          pylint $(git ls-files '*.py')

      - name: Pytest
        run: |
          pytest -q

  build-image:
    name: Build & Push Docker Image
    needs: [lint-test]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute version tag
        id: meta
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
            ${{ env.IMAGE_NAME }}:latest

  package-helm:
    name: Package & Push Helm Chart
    needs: [build-image]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Login to GHCR (Helm OCI)
        run: helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Bump chart/app versions to match tag
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          # Update Chart.yaml (portable sed)
          sed -i "s/^version: .*/version: ${VERSION}/" "$CHART_DIR/Chart.yaml"
          sed -i "s/^appVersion: .*/appVersion: \"${VERSION}\"/" "$CHART_DIR/Chart.yaml"
          # Update values.yaml image tag if present
          sed -i "s/^\(\s*tag:\s*\).*/\1\"${VERSION}\"/" "$CHART_DIR/values.yaml"

      - name: Package
        run: helm package "$CHART_DIR" --version "${GITHUB_REF_NAME#v}"

      - name: Push
        run: helm push quakewatch-${GITHUB_REF_NAME#v}.tgz oci://ghcr.io/${{ github.repository_owner }}/charts

  deploy:
    name: Deploy to Cluster (Helm)
    needs: [package-helm]
    if: startsWith(github.ref, 'refs/tags/v')  # deploy only on release tags
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: quakewatch-deploy
      cancel-in-progress: false
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Login to GHCR (Helm OCI)
        run: helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Write kubeconfig from secret
        run: |
          mkdir -p $HOME/.kube
          echo "${KUBECONFIG_B64}" | base64 -d > $HOME/.kube/config
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}

      - name: Helm upgrade/install
        run: |
          helm upgrade --install quakewatch oci://ghcr.io/${{ github.repository_owner }}/charts/quakewatch \
            --version "${GITHUB_REF_NAME#v}" \
            --namespace quakewatch --create-namespace \
            --set image.repository=${{ env.IMAGE_NAME }} \
            --set image.tag="${GITHUB_REF_NAME#v}"
